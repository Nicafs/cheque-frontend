{"ast":null,"code":"var _jsxFileName = \"/home/geia/git/cheque-frontend/src/pages/clientes/clientes.component.jsx\";\nimport React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { isEqual } from 'date-fns';\nimport { Container, Grid } from '@material-ui/core';\nimport TableCustom from '../../core/components/table/tableCustom';\nimport Filters from '../../core/components/filters/filters';\nimport { find, filter } from '../../redux/client/client.actions';\nimport './clientes.styles.scss';\n\nfunction Clientes({\n  findClients,\n  data,\n  filteredData,\n  filterSubmit\n}) {\n  const filters = [{\n    type: 'text',\n    name: 'name',\n    label: 'Nome',\n    validators: 'requerid',\n    value: null\n  }, {\n    type: 'date',\n    name: 'birthDate',\n    label: 'Data de Nascimento',\n    validators: 'requerid',\n    value: null\n  }, {\n    type: 'select',\n    name: 'gender',\n    label: 'Sexo',\n    validators: 'requerid',\n    value: null,\n    selects: [{\n      description: 'Masculino',\n      value: 'M'\n    }, {\n      description: 'Feminino',\n      value: 'F'\n    }]\n  }, {\n    type: 'text',\n    name: 'phone',\n    label: 'Telefone',\n    validators: 'requerid',\n    value: null,\n    format: '(00) 00000-0000'\n  }, {\n    type: 'text',\n    name: 'address',\n    label: 'Endereço',\n    validators: 'requerid',\n    value: null\n  }];\n  const columns = [{\n    title: 'Nome',\n    field: 'name'\n  }, {\n    title: 'Data de nascimento',\n    field: 'birthDate'\n  }, {\n    title: 'Sexo',\n    field: 'phone'\n  }, {\n    title: 'Telefone',\n    field: 'phone'\n  }, {\n    title: 'Endereço',\n    field: 'addrress'\n  }];\n  useEffect(() => {\n    findClients();\n  }, [findClients]);\n\n  const handleSubmit = filtersSubmit => {\n    filteredData = data;\n    filtersSubmit.map(filter => {\n      if (filter.value) {\n        filteredData = filteredData.filter(d => {\n          if (filter.type === 'text') return d[filter.name].includes(filter.value);\n          if (filter.type === 'date') return isEqual(new Date(d[filter.name]), new Date(filter.value));\n          return d[filter.name] === filter.value;\n        });\n      }\n\n      return filteredData;\n    });\n    filterSubmit(filteredData);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    className: \"Clientes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Filters, {\n    filters: filters,\n    handleSubmit: handleSubmit,\n    linkTo: \"/clientes/crud\",\n    linkPrev: \"/\",\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  })), filteredData ? /*#__PURE__*/React.createElement(TableCustom, {\n    data: filteredData,\n    columns: columns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 10\n    }\n  }) : null);\n}\n\n;\n\nconst mapStateToProps = state => {\n  return {\n    data: state.client.data,\n    filteredData: state.client.filteredData\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  filterSubmit: data => dispatch(filter(data)),\n  findClients: () => dispatch(find())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Clientes);","map":{"version":3,"sources":["/home/geia/git/cheque-frontend/src/pages/clientes/clientes.component.jsx"],"names":["React","useEffect","connect","isEqual","Container","Grid","TableCustom","Filters","find","filter","Clientes","findClients","data","filteredData","filterSubmit","filters","type","name","label","validators","value","selects","description","format","columns","title","field","handleSubmit","filtersSubmit","map","d","includes","Date","mapStateToProps","state","client","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from 'react-redux';\nimport { isEqual } from 'date-fns';\n\nimport {Container, Grid} from '@material-ui/core';\n\nimport TableCustom from '../../core/components/table/tableCustom';\nimport Filters from '../../core/components/filters/filters';\nimport { find, filter } from '../../redux/client/client.actions';\n\nimport './clientes.styles.scss';\n\nfunction Clientes({ findClients, data, filteredData, filterSubmit }) {\n\n  const filters = [\n    { type: 'text', name: 'name', label: 'Nome', validators: 'requerid', value: null },\n    { type: 'date', name: 'birthDate', label: 'Data de Nascimento', validators: 'requerid', value: null },\n    { type: 'select', name: 'gender', label: 'Sexo', validators: 'requerid', value: null, selects: [{ description: 'Masculino', value: 'M' }, { description: 'Feminino', value: 'F' }] },\n    { type: 'text', name: 'phone', label: 'Telefone', validators: 'requerid', value: null, format: '(00) 00000-0000' },\n    { type: 'text', name: 'address', label: 'Endereço', validators: 'requerid', value: null }\n  ]\n\n  const columns =  [\n    {\n      title: 'Nome', \n      field: 'name',\n    },\n    { title: 'Data de nascimento', field: 'birthDate', },\n    { title: 'Sexo', field: 'phone' },\n    {\n      title: 'Telefone',\n      field: 'phone',\n    },\n    {\n      title: 'Endereço',\n      field: 'addrress',\n    },\n  ]\n\n  useEffect(() => {\n    findClients();\n  }, [findClients]);\n\n  const handleSubmit = (filtersSubmit) => {\n    filteredData = data;\n    filtersSubmit.map(filter => {\n      if (filter.value) {\n        filteredData = filteredData.filter(d =>  {\n          if(filter.type === 'text') return d[filter.name].includes(filter.value);\n          if(filter.type === 'date') return isEqual(new Date(d[filter.name]), new Date(filter.value));\n          return d[filter.name] === filter.value;\n        })\n      }\n      return filteredData;\n    })\n\n    filterSubmit(filteredData);\n  }\n\n  return (\n    <Container className=\"Clientes\">\n      <Grid item md={12}>\n        <Filters filters={filters} handleSubmit={handleSubmit} linkTo='/clientes/crud' linkPrev='/' className=\"form\" />\n      </Grid>\n\n      {filteredData ?\n        (<TableCustom data={filteredData} columns={columns}/>)\n        : null}\n    </Container >\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    data: state.client.data,\n    filteredData: state.client.filteredData\n  };\n}\n\nconst mapDispatchToProps = dispatch => ({\n  filterSubmit: (data) => dispatch(filter(data)),\n  findClients: () => dispatch(find())\n});\n\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Clientes);\n"]},"metadata":{},"sourceType":"module"}