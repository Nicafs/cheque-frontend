{"ast":null,"code":"var _jsxFileName = \"/home/geia/git/cheque/cheque/src/pages/clientes/clientes.component.jsx\";\nimport React from \"react\";\nimport EnhancedTable from '../../components/table/EnchancedTable';\nconst data = [{\n  firstName: \"jane\",\n  lastName: \"doe\",\n  age: 20\n}, data];\nconst columns = [{\n  Header: \"Name\",\n  columns: [{\n    Header: \"First Name\",\n    accessor: \"firstName\"\n  }, {\n    Header: \"Last Name\",\n    accessor: \"lastName\"\n  }]\n}, {\n  Header: \"Other Info\",\n  columns: [{\n    Header: \"Age\",\n    accessor: \"age\"\n  }]\n}];\nconst [setData] = React.useState([]);\nconst [skipPageReset, setSkipPageReset] = React.useState(false); // When our cell renderer calls updateMyData, we'll use\n// the rowIndex, columnId and new value to update the\n// original data\n\nconst updateMyData = (rowIndex, columnId, value) => {\n  // We also turn on the flag to not reset the page\n  setSkipPageReset(true);\n  setData(old => old.map((row, index) => {\n    if (index === rowIndex) {\n      return { ...old[rowIndex],\n        [columnId]: value\n      };\n    }\n\n    return row;\n  }));\n};\n\nexport default function Clientes() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Clientes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EnhancedTable, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 6\n    }\n  }));\n}","map":{"version":3,"sources":["/home/geia/git/cheque/cheque/src/pages/clientes/clientes.component.jsx"],"names":["React","EnhancedTable","data","firstName","lastName","age","columns","Header","accessor","setData","useState","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index","Clientes"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AAEA,MAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,SAAS,EAAE,MAAb;AAAqBC,EAAAA,QAAQ,EAAE,KAA/B;AAAsCC,EAAAA,GAAG,EAAE;AAA3C,CADW,EACqCH,IADrC,CAAb;AAIA,MAAMI,OAAO,GAAG,CACd;AACEC,EAAAA,MAAM,EAAE,MADV;AAEED,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,MAAM,EAAE,YADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GADO,EAKP;AACED,IAAAA,MAAM,EAAE,WADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GALO;AAFX,CADc,EAcd;AACED,EAAAA,MAAM,EAAE,YADV;AAEED,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GADO;AAFX,CAdc,CAAhB;AAyBA,MAAM,CAACC,OAAD,IAAYT,KAAK,CAACU,QAAN,CAAe,EAAf,CAAlB;AACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCZ,KAAK,CAACU,QAAN,CAAe,KAAf,CAA1C,C,CAEA;AACE;AACA;;AACA,MAAMG,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAClD;AACAJ,EAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,EAAAA,OAAO,CAACQ,GAAG,IACTA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,QAAIA,KAAK,KAAKN,QAAd,EAAwB;AACtB,aAAO,EACL,GAAGG,GAAG,CAACH,QAAD,CADD;AAEL,SAACC,QAAD,GAAYC;AAFP,OAAP;AAID;;AACD,WAAOG,GAAP;AACD,GARD,CADK,CAAP;AAWD,CAdD;;AAgBF,eAAe,SAASE,QAAT,GAAoB;AACjC,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,aAAD;AACG,IAAA,OAAO,EAAEf,OADZ;AAEG,IAAA,IAAI,EAAEJ,IAFT;AAGG,IAAA,OAAO,EAAEO,OAHZ;AAIG,IAAA,YAAY,EAAEI,YAJjB;AAKG,IAAA,aAAa,EAAEF,aALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADF;AAWD","sourcesContent":["import React from \"react\";\nimport EnhancedTable from '../../components/table/EnchancedTable'\n\nconst data = [\n  { firstName: \"jane\", lastName: \"doe\", age: 20 },data\n];\n\nconst columns = [\n  {\n    Header: \"Name\",\n    columns: [\n      {\n        Header: \"First Name\",\n        accessor: \"firstName\"\n      },\n      {\n        Header: \"Last Name\",\n        accessor: \"lastName\"\n      }\n    ]\n  },\n  {\n    Header: \"Other Info\",\n    columns: [\n      {\n        Header: \"Age\",\n        accessor: \"age\"\n      }\n    ]\n  }\n];\n\nconst [setData] = React.useState([]);\nconst [skipPageReset, setSkipPageReset] = React.useState(false);\n\n// When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\nexport default function Clientes() {\n  return (\n    <div className=\"Clientes\">\n     <EnhancedTable\n        columns={columns}\n        data={data}\n        setData={setData}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n      />\n    </div>\n  );\n}"]},"metadata":{},"sourceType":"module"}