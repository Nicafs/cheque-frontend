{"ast":null,"code":"var _jsxFileName = \"/home/geia/git/cheque/cheque/src/components/table/EnchancedTable.js\";\nimport React from 'react';\nimport MaUTable from '@material-ui/core/Table';\nimport PropTypes from 'prop-types';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TableHead from '@material-ui/core/TableHead';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TablePaginationActions from './TablePaginationActions';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport TableToolbar from './TableToolbar';\nimport { useGlobalFilter, usePagination, useRowSelect, useSortBy, useTable } from 'react-table';\nconst inputStyle = {\n  padding: 0,\n  margin: 0,\n  border: 0,\n  background: 'transparent'\n}; // Create an editable cell renderer\n\nconst EditableCell = ({\n  value: initialValue,\n  row: {\n    index\n  },\n  column: {\n    id\n  },\n  updateMyData // This is a custom function that we supplied to our table instance\n\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  }; // We'll only update the external data when the input is blurred\n\n\n  const onBlur = () => {\n    updateMyData(index, id, value);\n  }; // If the initialValue is changed externall, sync it up with our state\n\n\n  React.useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/React.createElement(\"input\", {\n    style: inputStyle,\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  });\n};\n\nEditableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.any.isRequired\n  }),\n  row: PropTypes.shape({\n    index: PropTypes.number.isRequired\n  }),\n  column: PropTypes.shape({\n    id: PropTypes.number.isRequired\n  }),\n  updateMyData: PropTypes.func.isRequired\n}; // Set our editable cell renderer as the default Cell renderer\n\nconst defaultColumn = {\n  Cell: EditableCell\n};\n\nconst EnhancedTable = ({\n  columns,\n  data,\n  setData,\n  updateMyData,\n  skipPageReset\n}) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: {\n      pageIndex,\n      pageSize,\n      globalFilter\n    }\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    autoResetPage: !skipPageReset,\n    // updateMyData isn't part of the API, but\n    // anything we put into these options will\n    // automatically be available on the instance.\n    // That way we can call this function from our\n    // cell renderer!\n    updateMyData\n  }, useGlobalFilter, useSortBy, usePagination, useRowSelect, hooks => {\n    hooks.allColumns.push(columns => [// Let's make a column for selection\n    {\n      id: 'selection',\n      // The header can use the table's getToggleAllRowsSelectedProps method\n      // to render a checkbox.  Pagination is a problem since this will select all\n      // rows even though not all rows are on the current page.  The solution should\n      // be server side pagination.  For one, the clients should not download all\n      // rows in most cases.  The client should only download data for the current page.\n      // In that case, getToggleAllRowsSelectedProps works fine.\n      Header: ({\n        getToggleAllRowsSelectedProps\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getToggleAllRowsSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 15\n        }\n      }))),\n      // The cell can use the individual row's getToggleRowSelectedProps method\n      // to the render a checkbox\n      Cell: ({\n        row\n      }) => /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", Object.assign({}, row.getToggleRowSelectedProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      })))\n    }, ...columns]);\n  });\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value));\n  }; //   const removeByIndexs = (array, indexs) =>\n  //     array.filter((_, i) => !indexs.includes(i))\n  //   const deleteUserHandler = event => {\n  //     const newData = removeByIndexs(\n  //       data,\n  //       Object.keys(selectedRowIds).map(x => parseInt(x, 10))\n  //     )\n  //     setData(newData)\n  //   }\n  //   const addUserHandler = user => {\n  //     const newData = data.concat([user])\n  //     setData(newData)\n  //   }\n  // Render the UI for your table\n\n\n  return /*#__PURE__*/React.createElement(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableToolbar, {\n    preGlobalFilteredRows: preGlobalFilteredRows,\n    setGlobalFilter: setGlobalFilter,\n    globalFilter: globalFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(MaUTable, Object.assign({}, getTableProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 9\n    }\n  }, headerGroups.map(headerGroup => /*#__PURE__*/React.createElement(TableRow, Object.assign({}, headerGroup.getHeaderGroupProps(), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }), headerGroup.headers.map(column => /*#__PURE__*/React.createElement(TableCell, Object.assign({}, column.id === 'selection' ? column.getHeaderProps() : column.getHeaderProps(column.getSortByToggleProps()), {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }), column.render('Header'), column.id !== 'selection' ? /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: column.isSorted // react-table has a unsorted state which is not treated here\n    ,\n    direction: column.isSortedDesc ? 'desc' : 'asc',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 21\n    }\n  }) : null))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, page.map((row, i) => {\n    prepareRow(row);\n    return /*#__PURE__*/React.createElement(TableRow, Object.assign({}, row.getRowProps(), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }), row.cells.map(cell => {\n      return /*#__PURE__*/React.createElement(TableCell, Object.assign({}, cell.getCellProps(), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 21\n        }\n      }), cell.render('Cell'));\n    }));\n  })), /*#__PURE__*/React.createElement(TableFooter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TablePagination, {\n    rowsPerPageOptions: [5, 10, 25, {\n      label: 'All',\n      value: data.length\n    }],\n    colSpan: 3,\n    count: data.length,\n    rowsPerPage: pageSize,\n    page: pageIndex,\n    SelectProps: {\n      inputProps: {\n        'aria-label': 'rows per page'\n      },\n      native: true\n    },\n    onChangePage: handleChangePage,\n    onChangeRowsPerPage: handleChangeRowsPerPage,\n    ActionsComponent: TablePaginationActions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  })))));\n};\n\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  updateMyData: PropTypes.func.isRequired,\n  setData: PropTypes.func.isRequired,\n  skipPageReset: PropTypes.bool.isRequired\n};\nexport default EnhancedTable;","map":{"version":3,"sources":["/home/geia/git/cheque/cheque/src/components/table/EnchancedTable.js"],"names":["React","MaUTable","PropTypes","TableBody","TableCell","TableContainer","TableFooter","TableHead","TablePagination","TablePaginationActions","TableRow","TableSortLabel","TableToolbar","useGlobalFilter","usePagination","useRowSelect","useSortBy","useTable","inputStyle","padding","margin","border","background","EditableCell","value","initialValue","row","index","column","id","updateMyData","setValue","useState","onChange","e","target","onBlur","useEffect","propTypes","cell","shape","any","isRequired","number","func","defaultColumn","Cell","EnhancedTable","columns","data","setData","skipPageReset","getTableProps","headerGroups","prepareRow","page","gotoPage","setPageSize","preGlobalFilteredRows","setGlobalFilter","state","pageIndex","pageSize","globalFilter","autoResetPage","hooks","allColumns","push","Header","getToggleAllRowsSelectedProps","getToggleRowSelectedProps","handleChangePage","event","newPage","handleChangeRowsPerPage","Number","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","getCellProps","label","length","inputProps","native","array","bool"],"mappings":"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","sourcesContent":["import React from 'react'\n\nimport MaUTable from '@material-ui/core/Table'\nimport PropTypes from 'prop-types'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableFooter from '@material-ui/core/TableFooter'\nimport TableHead from '@material-ui/core/TableHead'\nimport TablePagination from '@material-ui/core/TablePagination'\nimport TablePaginationActions from './TablePaginationActions'\nimport TableRow from '@material-ui/core/TableRow'\nimport TableSortLabel from '@material-ui/core/TableSortLabel'\nimport TableToolbar from './TableToolbar'\nimport {\n  useGlobalFilter,\n  usePagination,\n  useRowSelect,\n  useSortBy,\n  useTable,\n} from 'react-table'\n\nconst inputStyle = {\n  padding: 0,\n  margin: 0,\n  border: 0,\n  background: 'transparent',\n}\n\n// Create an editable cell renderer\nconst EditableCell = ({\n  value: initialValue,\n  row: { index },\n  column: { id },\n  updateMyData, // This is a custom function that we supplied to our table instance\n}) => {\n  // We need to keep and update the state of the cell normally\n  const [value, setValue] = React.useState(initialValue)\n\n  const onChange = e => {\n    setValue(e.target.value)\n  }\n\n  // We'll only update the external data when the input is blurred\n  const onBlur = () => {\n    updateMyData(index, id, value)\n  }\n\n  // If the initialValue is changed externall, sync it up with our state\n  React.useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <input\n      style={inputStyle}\n      value={value}\n      onChange={onChange}\n      onBlur={onBlur}\n    />\n  )\n}\n\nEditableCell.propTypes = {\n  cell: PropTypes.shape({\n    value: PropTypes.any.isRequired,\n  }),\n  row: PropTypes.shape({\n    index: PropTypes.number.isRequired,\n  }),\n  column: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n  }),\n  updateMyData: PropTypes.func.isRequired,\n}\n\n// Set our editable cell renderer as the default Cell renderer\nconst defaultColumn = {\n  Cell: EditableCell,\n}\n\nconst EnhancedTable = ({\n  columns,\n  data,\n  setData,\n  updateMyData,\n  skipPageReset,\n}) => {\n  const {\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    page,\n    gotoPage,\n    setPageSize,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n    state: { pageIndex, pageSize, globalFilter },\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn,\n      autoResetPage: !skipPageReset,\n      // updateMyData isn't part of the API, but\n      // anything we put into these options will\n      // automatically be available on the instance.\n      // That way we can call this function from our\n      // cell renderer!\n      updateMyData,\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n    useRowSelect,\n    hooks => {\n      hooks.allColumns.push(columns => [\n        // Let's make a column for selection\n        {\n          id: 'selection',\n          // The header can use the table's getToggleAllRowsSelectedProps method\n          // to render a checkbox.  Pagination is a problem since this will select all\n          // rows even though not all rows are on the current page.  The solution should\n          // be server side pagination.  For one, the clients should not download all\n          // rows in most cases.  The client should only download data for the current page.\n          // In that case, getToggleAllRowsSelectedProps works fine.\n          Header: ({ getToggleAllRowsSelectedProps }) => (\n            <div>\n              <div {...getToggleAllRowsSelectedProps()} />\n            </div>\n          ),\n          // The cell can use the individual row's getToggleRowSelectedProps method\n          // to the render a checkbox\n          Cell: ({ row }) => (\n            <div>\n              <div {...row.getToggleRowSelectedProps()} />\n            </div>\n          ),\n        },\n        ...columns,\n      ])\n    }\n  )\n\n  const handleChangePage = (event, newPage) => {\n    gotoPage(newPage)\n  }\n\n  const handleChangeRowsPerPage = event => {\n    setPageSize(Number(event.target.value))\n  }\n\n//   const removeByIndexs = (array, indexs) =>\n//     array.filter((_, i) => !indexs.includes(i))\n\n//   const deleteUserHandler = event => {\n//     const newData = removeByIndexs(\n//       data,\n//       Object.keys(selectedRowIds).map(x => parseInt(x, 10))\n//     )\n//     setData(newData)\n//   }\n\n//   const addUserHandler = user => {\n//     const newData = data.concat([user])\n//     setData(newData)\n//   }\n\n  // Render the UI for your table\n  return (\n    <TableContainer>\n    <TableToolbar\n      preGlobalFilteredRows={preGlobalFilteredRows}\n      setGlobalFilter={setGlobalFilter}\n      globalFilter={globalFilter}\n    />\n      <MaUTable {...getTableProps()}>\n        <TableHead>\n          {headerGroups.map(headerGroup => (\n            <TableRow {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <TableCell\n                  {...(column.id === 'selection'\n                    ? column.getHeaderProps()\n                    : column.getHeaderProps(column.getSortByToggleProps()))}\n                >\n                  {column.render('Header')}\n                  {column.id !== 'selection' ? (\n                    <TableSortLabel\n                      active={column.isSorted}\n                      // react-table has a unsorted state which is not treated here\n                      direction={column.isSortedDesc ? 'desc' : 'asc'}\n                    />\n                  ) : null}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableHead>\n        <TableBody>\n          {page.map((row, i) => {\n            prepareRow(row)\n            return (\n              <TableRow {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return (\n                    <TableCell {...cell.getCellProps()}>\n                      {cell.render('Cell')}\n                    </TableCell>\n                  )\n                })}\n              </TableRow>\n            )\n          })}\n        </TableBody>\n\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[\n                5,\n                10,\n                25,\n                { label: 'All', value: data.length },\n              ]}\n              colSpan={3}\n              count={data.length}\n              rowsPerPage={pageSize}\n              page={pageIndex}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n              ActionsComponent={TablePaginationActions}\n            />\n          </TableRow>\n        </TableFooter>\n      </MaUTable>\n    </TableContainer>\n  )\n}\n\nEnhancedTable.propTypes = {\n  columns: PropTypes.array.isRequired,\n  data: PropTypes.array.isRequired,\n  updateMyData: PropTypes.func.isRequired,\n  setData: PropTypes.func.isRequired,\n  skipPageReset: PropTypes.bool.isRequired,\n}\n\nexport default EnhancedTable\n"]},"metadata":{},"sourceType":"module"}