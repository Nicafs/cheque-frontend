{"ast":null,"code":"var _jsxFileName = \"/home/geia/git/cheque/cheque/src/pages/clientes/clientes.component.jsx\";\nimport React from \"react\";\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport EnhancedTable from '../../components/table/EnchancedTable';\nconst data = [{\n  firstName: \"jane\",\n  lastName: \"doe\",\n  age: 20\n}];\nconst columns = [{\n  Header: \"Name\",\n  accessor: \"firstName\"\n}, {\n  Header: \"Other Info\",\n  accessor: \"age\"\n}];\n\nconst Clientes = () => {\n  const [setData] = React.useState([]);\n  const [skipPageReset, setSkipPageReset] = React.useState(false); // When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true);\n    setData(old => old.map((row, index) => {\n      if (index === rowIndex) {\n        return { ...old[rowIndex],\n          [columnId]: value\n        };\n      }\n\n      return row;\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Clientes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CssBaseline, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(EnhancedTable, {\n    columns: columns,\n    data: data,\n    setData: setData,\n    updateMyData: updateMyData,\n    skipPageReset: skipPageReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default Clientes;","map":{"version":3,"sources":["/home/geia/git/cheque/cheque/src/pages/clientes/clientes.component.jsx"],"names":["React","CssBaseline","EnhancedTable","data","firstName","lastName","age","columns","Header","accessor","Clientes","setData","useState","skipPageReset","setSkipPageReset","updateMyData","rowIndex","columnId","value","old","map","row","index"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AAEA,MAAMC,IAAI,GAAG,CACX;AAAEC,EAAAA,SAAS,EAAE,MAAb;AAAqBC,EAAAA,QAAQ,EAAE,KAA/B;AAAsCC,EAAAA,GAAG,EAAE;AAA3C,CADW,CAAb;AAIA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,MAAM,EAAE,MADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CADc,EAKd;AACED,EAAAA,MAAM,EAAE,YADV;AAEEC,EAAAA,QAAQ,EAAE;AAFZ,CALc,CAAhB;;AAWA,MAAMC,QAAQ,GAAG,MAAM;AAEvB,QAAM,CAACC,OAAD,IAAYX,KAAK,CAACY,QAAN,CAAe,EAAf,CAAlB;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCd,KAAK,CAACY,QAAN,CAAe,KAAf,CAA1C,CAHuB,CAKvB;AACE;AACA;;AACA,QAAMG,YAAY,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,KAA+B;AAClD;AACAJ,IAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAH,IAAAA,OAAO,CAACQ,GAAG,IACTA,GAAG,CAACC,GAAJ,CAAQ,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACtB,UAAIA,KAAK,KAAKN,QAAd,EAAwB;AACtB,eAAO,EACL,GAAGG,GAAG,CAACH,QAAD,CADD;AAEL,WAACC,QAAD,GAAYC;AAFP,SAAP;AAID;;AACD,aAAOG,GAAP;AACD,KARD,CADK,CAAP;AAWD,GAdD;;AAgBA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEC,oBAAC,aAAD;AACG,IAAA,OAAO,EAAEd,OADZ;AAEG,IAAA,IAAI,EAAEJ,IAFT;AAGG,IAAA,OAAO,EAAEQ,OAHZ;AAIG,IAAA,YAAY,EAAEI,YAJjB;AAKG,IAAA,aAAa,EAAEF,aALlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,CADF;AAYD,CApCD;;AAsCA,eAAeH,QAAf","sourcesContent":["import React from \"react\";\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport EnhancedTable from '../../components/table/EnchancedTable'\n\nconst data = [\n  { firstName: \"jane\", lastName: \"doe\", age: 20 },\n];\n\nconst columns = [\n  {\n    Header: \"Name\",\n    accessor: \"firstName\"\n  },\n  {\n    Header: \"Other Info\",\n    accessor: \"age\"\n  }\n];\n\nconst Clientes = () => {\n\nconst [setData] = React.useState([]);\nconst [skipPageReset, setSkipPageReset] = React.useState(false);\n\n// When our cell renderer calls updateMyData, we'll use\n  // the rowIndex, columnId and new value to update the\n  // original data\n  const updateMyData = (rowIndex, columnId, value) => {\n    // We also turn on the flag to not reset the page\n    setSkipPageReset(true)\n    setData(old =>\n      old.map((row, index) => {\n        if (index === rowIndex) {\n          return {\n            ...old[rowIndex],\n            [columnId]: value,\n          }\n        }\n        return row\n      })\n    )\n  }\n\n  return (\n    <div className=\"Clientes\">\n    <CssBaseline />\n     <EnhancedTable\n        columns={columns}\n        data={data}\n        setData={setData}\n        updateMyData={updateMyData}\n        skipPageReset={skipPageReset}\n      />\n    </div>\n  );\n}\n\nexport default Clientes;"]},"metadata":{},"sourceType":"module"}